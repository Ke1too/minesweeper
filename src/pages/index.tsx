import { useState } from 'react';
import styles from './index.module.css';

const Home = () => {
  // 0 -> Êú™„ÇØ„É™„ÉÉ„ÇØ
  // 1 -> Â∑¶„ÇØ„É™„ÉÉ„ÇØ
  // 2 -> „ÅØ„Å¶„Å™
  // 3 -> Êóó(Âè≥„ÇØ„É™„ÉÉ„ÇØ)

  const [userInputs, setUserInputs] = useState<(0 | 1 | 2 | 3)[][]>([
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
  ]);

  // 0 -> „Éú„É†ÁÑ°„Åó
  // 1 -> „Éú„É†Êúâ„Çä
  const [bombMap, setbombMap] = useState([
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
  ]);
  const isPlaying = userInputs.some((row) => row.some((input) => input !== 0));
  const isFailure = userInputs.some((row, y) =>
    row.some((input, x) => input === 1 && bombMap[y][x] === 1)
  );
  // -1 -> Áü≥
  // 0 -> ÁîªÂÉè„Å™„Åó„Çª„É´
  // 1~8 -> Êï∞Â≠ó„Çª„É´
  // 9 -> Áü≥Ôºã„ÅØ„Å¶„Å™
  // 10 -> Áü≥ÔºãÊóó
  // 11 -> „Éú„É†„Çª„É´
  // 12 -> „ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„Å®„Åì„Çç„Åå„Éú„É†„Å†„Å£„ÅüÂ†¥Âêà„ÄÅ„Åù„Åì„ÅÆËÉåÊôØ„ÇíËµ§„Å´„Åô„Çã

  const board: number[][] = [
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  ];

  const directions = [
    [-1, -1],
    [-1, 0],
    [-1, 1],
    [0, 1],
    [0, -1],
    [1, 1],
    [1, 0],
    [1, -1],
  ];

  // „Éú„É†Ë®≠ÁΩÆ„ÄÅ10ÂÄãÁΩÆ„ÅÑ„Åü„ÇâÁµÇ‰∫Ü„Åô„Çã
  const clickLeft = (x: number, y: number) => {
    console.log(x, y);
    if (!bombMap.flat().includes(1)) {
      const newBombMap: number[][] = JSON.parse(JSON.stringify(bombMap));
      let bomb = 0;
      while (bomb < 10) {
        const s = Math.floor(Math.random() * 9);
        const t = Math.floor(Math.random() * 9);

        if (!newBombMap[s][t]) {
          console.log('ü§©');
          newBombMap[s][t] = 1;
          bomb += 1;
        }
      }

      setbombMap(newBombMap);
    }
  };

  //ÂÜçÂ∏∞Èñ¢Êï∞„ÄÅ„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂë®„ÇäÔºòÊñπÂêë„Å´„ÅÇ„Çã„Éú„É†„ÅÆÊääÊè°
  const Checkaround = (x: number, y: number) => {
    let bombCount = 0;
    for (const [y2, x2] of directions) {
      if (
        bombMap[y + y2] !== undefined &&
        bombMap[y + y2][x + x2] !== undefined &&
        bombMap[y + y2][x + x2] === 1
      ) {
        bombCount++;
      }
    }
    board[y][x] = bombCount;
    if (bombCount === 0) {
      for (const [y2, x2] of directions) {
        if (
          board[y + y2] !== undefined &&
          board[y + y2][x + x2] !== undefined &&
          (board[y + y2][x + x2] === -1 ||
            board[y + y2][x + x2] === 9 ||
            board[y + y2][x + x2] === 10)
        ) {
          Checkaround(x + x2, y + y2);
        }
      }
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.board}>
        {board.map((row, y) =>
          row.map((color, x) => (
            <div
              className={styles.cell}
              key={`${x}-${y}`}
              onClick={() => clickLeft(x, y)}
              style={{ backgroundPositionX: 80 + -80 * color }}
            >
              {(color === -1 || color === 9 || color === 10) && (
                <div className={styles.stone} style={{ backgroundPositionX: 60 + -60 * color }} />
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default Home;
